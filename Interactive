/* Base styles */
body {
  margin: 0;
  font-family: Arial, sans-serif;
}

/* Navigation bar */
nav {
  position: fixed;  /* stays fixed */
  top: 0;
  left: 0;
  width: 100%;
  background: transparent;  /* default */
  transition: all 0.3s ease; /* smooth change */
  padding: 20px 0;
  z-index: 1000;
}

nav ul {
  list-style: none;
  margin: 0;
  padding: 0;
  display: flex;
  justify-content: center;
}

nav ul li {
  margin: 0 20px;
}

nav ul li a {
  text-decoration: none;
  color: #333;
  font-size: 18px;
  transition: color 0.3s ease;
}

/* When scrolled */
nav.scrolled {
  background: #333;
  padding: 10px 0; /* shrink nav */
  box-shadow: 0 2px 10px rgba(0,0,0,0.2);
}

nav.scrolled ul li a {
  color: #fff; /* text color changes */
}

/* Sections for scrolling */
section {
  height: 100vh;
  padding-top: 80px;
  text-align: center;
}
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Stopwatch App</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      background: #f5f5f5;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: start;
      min-height: 100vh;
      padding: 30px;
    }

    h1 {
      margin-bottom: 20px;
    }

    .stopwatch {
      background: #fff;
      border-radius: 15px;
      box-shadow: 0 4px 10px rgba(0,0,0,0.1);
      padding: 30px;
      text-align: center;
      width: 300px;
    }

    .time {
      font-size: 2.5rem;
      font-weight: bold;
      margin-bottom: 20px;
    }

    .buttons {
      display: flex;
      justify-content: space-between;
      margin-bottom: 20px;
    }

    button {
      flex: 1;
      margin: 0 5px;
      padding: 10px;
      font-size: 1rem;
      border: none;
      border-radius: 8px;
      cursor: pointer;
      transition: background 0.3s ease;
    }

    button.start {
      background-color: #4CAF50;
      color: white;
    }

    button.start:hover {
      background-color: #45a049;
    }

    button.lap {
      background-color: #2196F3;
      color: white;
    }

    button.lap:hover {
      background-color: #0b7dda;
    }

    button.reset {
      background-color: #f44336;
      color: white;
    }

    button.reset:hover {
      background-color: #da190b;
    }

    .laps {
      max-height: 200px;
      overflow-y: auto;
      text-align: left;
    }

    .laps h3 {
      margin: 10px 0 5px;
    }

    .lap-item {
      background: #eee;
      margin: 5px 0;
      padding: 5px 10px;
      border-radius: 5px;
    }

  </style>
</head>
<body>

  <h1>Stopwatch</h1>
  <div class="stopwatch">
    <div class="time" id="time">00:00.00</div>
    <div class="buttons">
      <button id="startStop" class="start">Start</button>
      <button id="lap" class="lap">Lap</button>
      <button id="reset" class="reset">Reset</button>
    </div>
    <div class="laps">
      <h3>Laps:</h3>
      <div id="lapsList"></div>
    </div>
  </div>

  <script>
    let startTime = 0;
    let elapsedTime = 0;
    let timerInterval;
    let running = false;
    let lapCount = 0;

    const timeDisplay = document.getElementById('time');
    const startStopBtn = document.getElementById('startStop');
    const lapBtn = document.getElementById('lap');
    const resetBtn = document.getElementById('reset');
    const lapsList = document.getElementById('lapsList');

    function updateTime() {
      const now = Date.now();
      elapsedTime = now - startTime;
      let ms = Math.floor((elapsedTime % 1000) / 10);
      let seconds = Math.floor((elapsedTime / 1000) % 60);
      let minutes = Math.floor((elapsedTime / (1000 * 60)) % 60);

      ms = ms < 10 ? '0' + ms : ms;
      seconds = seconds < 10 ? '0' + seconds : seconds;
      minutes = minutes < 10 ? '0' + minutes : minutes;

      timeDisplay.textContent = `${minutes}:${seconds}.${ms}`;
    }

    startStopBtn.addEventListener('click', () => {
      if (!running) {
        // Start
        running = true;
        startTime = Date.now() - elapsedTime;
        timerInterval = setInterval(updateTime, 10);
        startStopBtn.textContent = 'Pause';
        startStopBtn.classList.remove('start');
        startStopBtn.classList.add('reset');
      } else {
        // Pause
        running = false;
        clearInterval(timerInterval);
        startStopBtn.textContent = 'Start';
        startStopBtn.classList.remove('reset');
        startStopBtn.classList.add('start');
      }
    });

    lapBtn.addEventListener('click', () => {
      if (running) {
        lapCount++;
        const lapTime = timeDisplay.textContent;
        const lapItem = document.createElement('div');
        lapItem.className = 'lap-item';
        lapItem.textContent = `Lap ${lapCount}: ${lapTime}`;
        lapsList.prepend(lapItem);
      }
    });

    resetBtn.addEventListener('click', () => {
      running = false;
      clearInterval(timerInterval);
      elapsedTime = 0;
      timeDisplay.textContent = '00:00.00';
      startStopBtn.textContent = 'Start';
      startStopBtn.classList.remove('reset');
      startStopBtn.classList.add('start');
      lapCount = 0;
      lapsList.innerHTML = '';
    });
  </script>
</body>
</html>
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Interactive Quiz Game</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      background: #f4f4f4;
      display: flex;
      justify-content: center;
      align-items: center;
      min-height: 100vh;
      margin: 0;
    }

    .quiz-container {
      background: #fff;
      padding: 20px 30px;
      border-radius: 10px;
      box-shadow: 0 4px 10px rgba(0,0,0,0.1);
      width: 400px;
    }

    h1 {
      text-align: center;
    }

    .question {
      font-size: 1.2rem;
      margin-bottom: 20px;
    }

    .options {
      list-style: none;
      padding: 0;
    }

    .options li {
      background: #f1f1f1;
      margin: 8px 0;
      padding: 10px;
      border-radius: 5px;
      cursor: pointer;
      transition: background 0.3s ease;
    }

    .options li:hover {
      background: #ddd;
    }

    .next-btn {
      margin-top: 20px;
      padding: 10px 15px;
      background: #4CAF50;
      color: #fff;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      width: 100%;
      font-size: 1rem;
    }

    .next-btn:hover {
      background: #45a049;
    }

    .score-container {
      text-align: center;
    }

    .score-container h2 {
      margin-bottom: 15px;
    }

    .restart-btn {
      background: #2196F3;
      padding: 10px 15px;
      border: none;
      color: #fff;
      border-radius: 5px;
      cursor: pointer;
      font-size: 1rem;
    }

    .restart-btn:hover {
      background: #0b7dda;
    }

  </style>
</head>
<body>

  <div class="quiz-container" id="quiz">
    <h1>Quiz Game</h1>
    <div id="quiz-content">
      <div class="question" id="question"></div>
      <ul class="options" id="options"></ul>
      <button class="next-btn" id="nextBtn">Next</button>
    </div>
  </div>

  <script>
    // Quiz Questions
    const quizData = [
      {
        question: "Which language runs in a web browser?",
        options: ["Java", "C", "Python", "JavaScript"],
        answer: "JavaScript"
      },
      {
        question: "What does CSS stand for?",
        options: [
          "Central Style Sheets",
          "Cascading Style Sheets",
          "Cascading Simple Sheets",
          "Cars SUVs Sailboats"
        ],
        answer: "Cascading Style Sheets"
      },
      {
        question: "What does HTML stand for?",
        options: [
          "Hypertext Markup Language",
          "Hypertext Markdown Language",
          "Hyperloop Machine Language",
          "Helicopters Terminals Motorboats Lamborginis"
        ],
        answer: "Hypertext Markup Language"
      },
      {
        question: "What year was JavaScript launched?",
        options: ["1996", "1995", "1994", "none of the above"],
        answer: "1995"
      }
    ];

    let currentQuestion = 0;
    let score = 0;
    let selectedAnswer = null;

    const questionEl = document.getElementById('question');
    const optionsEl = document.getElementById('options');
    const nextBtn = document.getElementById('nextBtn');
    const quizContainer = document.getElementById('quiz');

    function loadQuestion() {
      // reset
      selectedAnswer = null;
      nextBtn.textContent = currentQuestion === quizData.length - 1 ? "Submit" : "Next";
      questionEl.textContent = quizData[currentQuestion].question;
      optionsEl.innerHTML = '';

      quizData[currentQuestion].options.forEach(option => {
        const li = document.createElement('li');
        li.textContent = option;
        li.addEventListener('click', () => {
          // deselect others
          [...optionsEl.children].forEach(c => c.style.background = '#f1f1f1');
          li.style.background = '#ccc';
          selectedAnswer = option;
        });
        optionsEl.appendChild(li);
      });
    }

    function showScore() {
      quizContainer.innerHTML = `
        <div class="score-container">
          <h2>You scored ${score} out of ${quizData.length}!</h2>
          <button class="restart-btn" onclick="restartQuiz()">Restart Quiz</button>
        </div>
      `;
    }

    nextBtn.addEventListener('click', () => {
      if (!selectedAnswer) {
        alert('Please select an answer!');
        return;
      }

      if (selectedAnswer === quizData[currentQuestion].answer) {
        score++;
      }

      currentQuestion++;

      if (currentQuestion < quizData.length) {
        loadQuestion();
      } else {
        showScore();
      }
    });

    function restartQuiz() {
      currentQuestion = 0;
      score = 0;
      quizContainer.innerHTML = `
        <h1>Quiz Game</h1>
        <div id="quiz-content">
          <div class="question" id="question"></div>
          <ul class="options" id="options"></ul>
          <button class="next-btn" id="nextBtn">Next</button>
        </div>
      `;
      // re-bind elements
      const q = document.getElementById('question');
      const o = document.getElementById('options');
      const n = document.getElementById('nextBtn');
      questionEl.textContent = "";
      optionsEl.innerHTML = "";
      n.addEventListener('click', nextBtn.onclick);
      location.reload(); // easiest way to restart
    }

    // load first question
    loadQuestion();
  </script>
</body>
</html>
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>To-Do App</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      background: #f4f4f4;
      display: flex;
      justify-content: center;
      align-items: flex-start;
      min-height: 100vh;
      margin: 0;
      padding: 20px;
    }

    .todo-container {
      background: #fff;
      padding: 20px;
      border-radius: 10px;
      width: 400px;
      box-shadow: 0 4px 10px rgba(0,0,0,0.1);
    }

    h1 {
      text-align: center;
    }

    form {
      display: flex;
      flex-direction: column;
      margin-bottom: 20px;
    }

    input[type="text"],
    input[type="datetime-local"] {
      padding: 8px;
      margin-bottom: 10px;
      border-radius: 5px;
      border: 1px solid #ccc;
      font-size: 1rem;
    }

    button {
      padding: 10px;
      background: #4CAF50;
      color: #fff;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      font-size: 1rem;
    }

    button:hover {
      background: #45a049;
    }

    ul {
      list-style: none;
      padding: 0;
    }

    li {
      background: #f1f1f1;
      padding: 10px;
      margin-bottom: 10px;
      border-radius: 5px;
      display: flex;
      justify-content: space-between;
      align-items: center;
      flex-wrap: wrap;
    }

    .task-info {
      flex: 1;
      margin-left: 10px;
    }

    .task-actions button {
      margin-left: 5px;
      padding: 5px 8px;
      font-size: 0.9rem;
      border: none;
      border-radius: 3px;
      cursor: pointer;
    }

    .complete {
      background-color: #2196F3;
      color: white;
    }

    .edit {
      background-color: #ff9800;
      color: white;
    }

    .delete {
      background-color: #f44336;
      color: white;
    }

    .completed-task {
      text-decoration: line-through;
      color: gray;
    }

    .date-time {
      font-size: 0.8rem;
      color: #666;
    }

  </style>
</head>
<body>
  <div class="todo-container">
    <h1>To-Do App</h1>
    <form id="taskForm">
      <input type="text" id="taskInput" placeholder="Enter a task" required />
      <input type="datetime-local" id="taskDateTime" />
      <button type="submit">Add Task</button>
    </form>
    <ul id="taskList"></ul>
  </div>

  <script>
    const taskForm = document.getElementById('taskForm');
    const taskInput = document.getElementById('taskInput');
    const taskDateTime = document.getElementById('taskDateTime');
    const taskList = document.getElementById('taskList');

    let tasks = [];

    function renderTasks() {
      taskList.innerHTML = '';
      tasks.forEach((task, index) => {
        const li = document.createElement('li');

        const checkbox = document.createElement('input');
        checkbox.type = 'checkbox';
        checkbox.checked = task.completed;
        checkbox.addEventListener('change', () => toggleComplete(index));

        const infoDiv = document.createElement('div');
        infoDiv.className = 'task-info';

        const taskText = document.createElement('span');
        taskText.textContent = task.text;
        if (task.completed) {
          taskText.classList.add('completed-task');
        }

        const dateTime = document.createElement('div');
        dateTime.className = 'date-time';
        if (task.dateTime) {
          dateTime.textContent = `Due: ${new Date(task.dateTime).toLocaleString()}`;
        }

        infoDiv.appendChild(taskText);
        if (task.dateTime) infoDiv.appendChild(dateTime);

        const actionsDiv = document.createElement('div');
        actionsDiv.className = 'task-actions';

        const editBtn = document.createElement('button');
        editBtn.textContent = 'Edit';
        editBtn.className = 'edit';
        editBtn.addEventListener('click', () => editTask(index));

        const delBtn = document.createElement('button');
        delBtn.textContent = 'Delete';
        delBtn.className = 'delete';
        delBtn.addEventListener('click', () => deleteTask(index));

        actionsDiv.appendChild(editBtn);
        actionsDiv.appendChild(delBtn);

        li.appendChild(checkbox);
        li.appendChild(infoDiv);
        li.appendChild(actionsDiv);

        taskList.appendChild(li);
      });
    }

    function addTask(text, dateTime) {
      tasks.push({ text, dateTime, completed: false });
      renderTasks();
    }

    function toggleComplete(index) {
      tasks[index].completed = !tasks[index].completed;
      renderTasks();
    }

    function deleteTask(index) {
      tasks.splice(index, 1);
      renderTasks();
    }

    function editTask(index) {
      const newText = prompt('Edit task:', tasks[index].text);
      if (newText !== null && newText.trim() !== '') {
        tasks[index].text = newText.trim();
      }
      const newDate = prompt('Edit date/time (YYYY-MM-DDTHH:MM):', tasks[index].dateTime || '');
      if (newDate !== null && newDate.trim() !== '') {
        tasks[index].dateTime = newDate.trim();
      }
      renderTasks();
    }

    taskForm.addEventListener('submit', (e) => {
      e.preventDefault();
      const text = taskInput.value.trim();
      const dateTime = taskDateTime.value;
      if (text) {
        addTask(text, dateTime);
        taskInput.value = '';
        taskDateTime.value = '';
      }
    });

    // initial render
    renderTasks();
  </script>
</body>
</html>
